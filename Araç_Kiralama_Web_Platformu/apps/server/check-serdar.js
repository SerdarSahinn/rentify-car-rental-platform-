const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkSerdar() {
  try {
    console.log('üîç Serdar kullanƒ±cƒ±sƒ± kontrol ediliyor...');
    
    // Serdar kullanƒ±cƒ±sƒ±nƒ± bul
    const serdarUser = await prisma.user.findUnique({
      where: { email: 'serdar6437@gmail.com' }
    });
    
    if (serdarUser) {
      console.log('‚úÖ Serdar kullanƒ±cƒ±sƒ± bulundu:');
      console.log('  - ID:', serdarUser.id);
      console.log('  - Email:', serdarUser.email);
      console.log('  - ClerkId:', serdarUser.clerkId);
      
      // Bu kullanƒ±cƒ±nƒ±n notification'larƒ±nƒ± kontrol et
      const notifications = await prisma.notification.findMany({
        where: { userId: serdarUser.id }
      });
      
      console.log('üìß Serdar\'ƒ±n notification sayƒ±sƒ±:', notifications.length);
      
      if (notifications.length > 0) {
        console.log('üìã ƒ∞lk 3 notification:');
        notifications.slice(0, 3).forEach((n, i) => {
          console.log(`  ${i+1}. ${n.title} - ${n.type}`);
        });
      }
      
    } else {
      console.log('‚ùå Serdar kullanƒ±cƒ±sƒ± bulunamadƒ±!');
    }
    
    // T√ºm kullanƒ±cƒ±larƒ± listele
    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        clerkId: true
      }
    });
    
    console.log('\nüë• T√ºm kullanƒ±cƒ±lar:');
    allUsers.forEach(user => {
      console.log(`  - ${user.email} (ID: ${user.id})`);
    });
    
  } catch (error) {
    console.error('‚ùå Hata:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkSerdar();
